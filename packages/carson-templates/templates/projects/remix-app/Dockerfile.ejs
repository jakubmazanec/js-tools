---
to: 'Dockerfile'
strategy: overwrite
---
<%
let lines = [];

for (let project of workspace.projects) {
  if (project.config.deployment?.appName) {
    lines.push(`COPY --from=build /workspace/${project.relativePath}/build /workspace/${project.relativePath}/build`);
    lines.push(`COPY --from=build /workspace/${project.relativePath}/package.json /workspace/${project.relativePath}/package.json`);
  } else {
    if (project.packageJson.bin) {
      lines.push(`COPY --from=build /workspace/${project.relativePath}/bin /workspace/${project.relativePath}/bin`);
    }

    lines.push(`COPY --from=build /workspace/${project.relativePath}/build /workspace/${project.relativePath}/build`);
    lines.push(`COPY --from=build /workspace/${project.relativePath}/package.json /workspace/${project.relativePath}/package.json`);
  }
}
-%>
#
# DO NOT EDIT!
# This file was autogenerated by Carson.
# Changes may cause incorrect behavior and will be lost when the file is regenerated.
#
# Run `npx carson update workspace` to regenerate.
#

# Base stage
FROM node:20-slim as base

WORKDIR /workspace

ENV NODE_ENV=production

# Throw-away build stage to reduce size of final image
FROM base as build

# Install packages needed to install dependencies
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential node-gyp pkg-config python-is-python3

# Install dependencies
COPY --link package-lock.json package.json ./
RUN npm ci --include=dev --ignore-scripts

# Copy the workspace
COPY --link . .

# Build
RUN npm run build

# Final stage for app image
FROM base

# Copy files
COPY package-lock.json package.json /workspace/
<%- lines.join('\n') %>

# Install dependencies
RUN npm ci --omit=dev --ignore-scripts

# Start the server
WORKDIR /workspace/apps/somewhere
EXPOSE 5000
ENTRYPOINT ["npm", "start"]
